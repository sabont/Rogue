class StringLookupList : LookupList<<String>>
  METHODS
    method add( key:String )->Int32
      this[ key ] = key
      return indices[ key ]
endClass

class LookupList<<$ValueType>>
  PROPERTIES
    indices = StringTable<<Int32>>()
    values  = $ValueType[]
    keys    = String[]

  METHODS
    method clear
      indices.clear
      values.clear
      keys.clear

    method contains( key:String )->Logical [macro]
      return this.indices.contains( key )

    method count->Int32
      return values.count

    method get( index:Int32 )->$ValueType
      return values[ index ]

    method get( key:String )->$ValueType
      local entry = indices.find( key )
      if (entry)
        return values[ entry.value ]
      else
        local default_value : $ValueType
        return default_value
      endIf

    method index( key:String )->Int32 [macro]
      return this.indices[ key ]

    method is_empty->Logical [macro]
      return (this.count == 0)

    method locate( key:String )->Int32?
      local entry = indices.find( key )
      if (entry) return entry.value
      else       return null

    method remove( key:String )->$ValueType
      local default_value : $ValueType
      local entry = indices.find( key )
      if (entry)
        indices.remove( entry )
        local index = entry.value

        # Decrement remaining indices > index
        entry = indices.first_entry
        while (entry)
          if (entry.value > index) --entry.value
          entry = entry.next_entry
        endWhile

        keys.remove_at( index )
        return values.remove_at( index )

      else
        return default_value

      endIf

    method remove_at( index:Int32 )->$ValueType
      return remove( keys[index] )

    method reserve( additional_elements:Int32 )
      keys.reserve( additional_elements )
      values.reserve( additional_elements )

    method set( index:Int32, value:$ValueType ) [macro]
      this.values[ index ] = value

    method set( key:String, value:$ValueType )->Int32
      local entry = indices.find( key )
      if (entry)
        values[ entry.value ] = value
        return entry.value
      else
        local index = values.count
        indices[ key ] = index
        values.add( value )
        keys.add( key )
        return index
      endIf

    method description->String
      local builder = StringBuilder()
      builder.print( '[' )
      local first = true
      forEach (i in 0..<count)
        if (first) first = false
        else       builder.print( ',' )
        builder.[ print(keys[i]), print(':'), print(values[i]) ]
      endForEach
      builder.print( ']' )
      return builder->String

    method to->$ValueType[]
      return values
endClass
