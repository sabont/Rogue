module UI

uses Geometry [export]
uses Utility/Action

$include "Event.rogue"
$include "Keyboard.rogue"
$include "Pointer.rogue"

$include "UIAbsoluteLayout.rogue"
$include "UIAttributes.rogue"
$include "UIBorder.rogue"
$include "UIComponent.rogue"
$include "UIContent.rogue"
$include "UIFiller.rogue"
$include "UIFlowLayout.rogue"
$include "UIFont.rogue"
$include "UIHorizontalLayout.rogue"
$include "UILabel.rogue"
$include "UILayout.rogue"
$include "UIList.rogue"
$include "UIModifier.rogue"
$include "UIPlacement.rogue"
$include "UIScrollView.rogue"
$include "UIScrollViewController.rogue"
$include "UISpacer.rogue"
$include "UIStackLayout.rogue"
$include "UITableLayout.rogue"
$include "UIText.rogue"
$include "UITheme.rogue"
$include "UIVerticalLayout.rogue"
$include "UIWidget.rogue"

class UI [singleton]
  GLOBAL PROPERTIES
    default_theme = UITheme()

  PROPERTIES
    bounds : Box
    layers = UIStackLayout()
    theme  : UITheme

    pointer_focus  : UIComponent
    keyboard_focus : UIComponent

    dirty_bounds   : Box?
    clip           : Box?

    is_enabled     = true
    # Disabled UI's do not update, draw, or receive events

    is_visible     = true
    # Invisible UI's update but do not draw or receive events

    actions : Action

  METHODS
    method init( theme )
      UI = this

    method after( e:KeyEvent )
      noAction

    method after( e:PointerEvent )
      noAction

    method after( e:ScrollEvent )
      noAction

    method after( e:TextEvent )
      noAction

    method after_resize
      noAction

    method after_draw
      noAction

    method after_update
      noAction

    method add( layer:UIComponent )
      layers.add( layer )

    method apply( fn:Function(UIComponent)->Logical )->Logical
      return layers.apply( fn )

    method broadcast_message( message:Value )
      dispatch_message( message )

    method clear
      layers.clear
      clear_focus
      dirty_bounds = null
      clip = null

    method clear_focus
      keyboard_focus = null
      pointer_focus = null

    method contains( pos:XY )->Logical
      return bounds.contains( pos )

    method default_font->UIFont
      return theme.default_font

    method default_theme->UITheme
      return @default_theme

    method description->String
      return layers->String

    method dispatch_message( message:Value )
      on_message( message )
      layers.dispatch_message( message )

    method drag_threshold->Real64
      return 16

    method draw
      if (not is_enabled or not is_visible) return
      UI = this

      on_draw

      if (dirty_bounds)
        dirty_bounds = dirty_bounds.value & bounds
        if (dirty_bounds)
          temporarily clip = dirty_bounds
            dirty_bounds = null
            layers.draw( clip.value )
          endTemporarily
        endIf
      endIf

      after_draw

    method find( pos:XY )->UIComponent
      return layers.find( pos )

    method handle( e:KeyEvent )
      if (not is_enabled or not is_visible) return
      UI = this

      on( e )
      if (e.is_consumed) return

      if (keyboard_focus)
        if (keyboard_focus.is_visible and keyboard_focus.is_input_enabled)
          keyboard_focus.handle( e )
        else
          keyboard_focus.release_keyboard_focus
          layers.handle( e )
        endIf
      else
        layers.handle( e )
      endIf
      if (e.is_consumed) return

      after( e )

    method handle( e:PointerEvent )
      if (not is_enabled or not is_visible) return
      UI = this

      on( e )
      if (e.is_consumed) return

      if (pointer_focus)
        if (pointer_focus.is_visible and pointer_focus.is_input_enabled)
          pointer_focus.handle( e )
        else
          pointer_focus.release_pointer_focus
          layers.handle( e )
        endIf
      else
        layers.handle( e )
      endIf
      if (e.is_consumed) return

      after( e )

    method handle( e:ScrollEvent )
      if (not is_enabled or not is_visible) return
      UI = this

      on( e )
      if (e.is_consumed) return

      if (pointer_focus)
        pointer_focus.handle( e )
      else
        layers.handle( e )
      endIf
      if (e.is_consumed) return

      after( e )

    method handle( e:TextEvent )
      if (not is_enabled or not is_visible) return
      UI = this

      on( e )
      if (e.is_consumed) return

      if (keyboard_focus)
        keyboard_focus.handle( e )
      else
        layers.handle( e )
      endIf
      if (e.is_consumed) return

      after( e )

    method on( e:KeyEvent )
      noAction

    method on( e:PointerEvent )
      noAction

    method on( e:ScrollEvent )
      noAction

    method on( e:TextEvent )
      noAction

    method on_draw
      noAction

    method on_message( message:Value )
      noAction

    method on_resize
      noAction

    method on_update
      noAction

    method on_update_layout
      # Called after a 'bounds' change to build or rebuild the layout.
      noAction

    method perform_layout
      layers.update_layout( bounds )

    method release_focus
      release_keyboard_focus
      release_pointer_focus

    method release_keyboard_focus
      if (keyboard_focus) keyboard_focus.release_pointer_focus

    method release_pointer_focus
      if (pointer_focus) pointer_focus.release_pointer_focus

    method remove( layer:UIComponent )
      layers.remove( layer )

    method request_layout
      layers.is_modified = true

    method request_redraw
      dirty_bounds = bounds

    method set_bounds( new_bounds:Box )
      if (new_bounds == bounds) return
      @bounds = new_bounds
      request_layout
      on_resize
      layers.handle_resize
      after_resize

    method set_clip( @clip )
      noAction # Override in specialized UI to have clip take effect

    method size->XY
      return bounds.size

    method theme->UITheme
      if (@theme) return @theme
      theme = default_theme
      return @theme

    method update
      UI = this
      if (not is_enabled) return
      on_update
      if (actions) actions .= update
      layers.update
      after_update

    method update( bounds:Box )
      UI = this

      # Must update before layout so that new components created in update() can be measured in
      # update_layout()
      update
      update_layout( bounds )

    method update_layout( new_bounds:Box )
      if (not is_enabled) return
      UI = this
      local bounds_changed = (bounds != new_bounds)
      if (bounds_changed)
        bounds = new_bounds
        if (bounds_changed) dirty_bounds = new_bounds  # Redraw the entire UI
        on_update_layout
      endIf

      if (layers.count and (bounds_changed or layers.is_modified))
        perform_layout
      endIf

endClass

