module UI
uses Geometry [export]

class Event
  PROPERTIES
    is_consumed  = false
    timestamp    : Real64
    is_processed : Logical  # for optional use by the UI library or other similar infrastructure

  METHODS
    method init( other:Event )
      is_consumed = other.is_consumed
      timestamp = other.timestamp
      is_processed = other.is_processed

    method cloned->Event
      throw UnsupportedOperationError()

    method consume
      this.is_consumed = true
endClass

class KeyEvent : Event
  PROPERTIES
    keycode            : Int32   # if keycode == Keycode.UNICODE then 'syscode' contains unicode value
    syscode            : Int32
    is_press           : Logical
    is_repeat          : Logical
    modifier_key_state : Int32

  METHODS
    method init( keycode, syscode, is_press=false, is_repeat=false, modifier_key_state=Keyboard.modifier_key_state )

    method cloned->KeyEvent
      return KeyEvent( keycode, syscode, is_press, is_repeat, modifier_key_state ).[ init(this) ]

    method is_alt_pressed->Logical
      return (modifier_key_state & Keyboard.ALT_MODIFIER_FLAG)

    method is_control_pressed->Logical
      return (modifier_key_state & Keyboard.CONTROL_MODIFIER_FLAG)

    method is_os_pressed->Logical
      return (modifier_key_state & Keyboard.OS_MODIFIER_FLAG)

    method is_press( _keycode:Int32 )->Logical
      return keycode == _keycode and is_press

    method is_repeat( _keycode:Int32 )->Logical
      return keycode == _keycode and is_repeat

    method is_release->Logical [macro]
      return not this.is_press

    method is_release( _keycode:Int32 )->Logical
      return keycode == _keycode and not is_press

    method is_shift_pressed->Logical
      return (modifier_key_state & Keyboard.SHIFT_MODIFIER_FLAG)

    method description->String
      local buffer = StringBuilder()
      which (keycode)
         case    1: buffer.print( "[LeftArrow] " )
         case    2: buffer.print( "[UpArrow] " )
         case    3: buffer.print( "[RightArrow] " )
         case    4: buffer.print( "[DownArrow] " )
         case    8: buffer.print( "[Backspace] " )
         case '\t': buffer.print( "[Tab] " )
         case '\n': buffer.print( "[Enter] " )
         case   27: buffer.print( "[Escape] " )
         case   32: buffer.print( "[Space] " )
         case  127: buffer.print( "[Delete] " )
         others
           buffer.print( "(Keycode " ).print( Int32(keycode) ).print( ") " )
       endWhich

       if (is_press)
         if (is_repeat) buffer.print( "pressed (repeating)" )
         else           buffer.print( "pressed" )
       else
         buffer.print( "released" )
       endIf

        if (is_consumed) buffer.print( " (consumed)" )

       return buffer->String

    method unicode->Character
      if (keycode == Keycode.UNICODE) return syscode->Character
      return Keycode.keycode_to_unicode( keycode, is_shift_pressed )

endClass


class TextEvent : Event
  PROPERTIES
    character : Character
    text      : String

  METHODS
    method init( character, text )

    method cloned->TextEvent
      return TextEvent( character, text ).[ init(this) ]

    method text->String
      if (not @text) text = "" + character
      return @text

    method count->Int32
      if (@text) return @text.count
      else       return 1

    method operator==( ch:Character )->Logical
      return (this.character == ch and (@text is null or @text.count == 1))

    method operator==( value:String )->Logical
      which (value.count)
        case 0
          return false
        case 1
          return (character == value[0])
        case 2
          return (text == value)
      endWhich

    method description->String
      return text
endClass


class PointerEvent : Event
  ENUMERATE
    MOVE       = 0
    PRESS      = 1
    RELEASE    = 2
    DRAG_MOVE  = 3
    DRAG_START = 4
    DRAG_STOP  = 5

    LEFT     = 0
    RIGHT    = 1
    MIDDLE   = 2

  PROPERTIES
    type         : Int32
    position     : XY
    delta        : XY
    index        : Int32
    is_cancelled : Logical
    # When a touch event in progress is interrupted then a RELEASE event is sent
    # with .is_cancelled==true.

  METHODS
    method init( type, position, delta, index, is_cancelled=false )

    method cloned->PointerEvent
      return PointerEvent( type, position, delta, index, is_cancelled ).[ init(this) ]

    method is_drag_move->Logical [macro]
      return (this.type == PointerEvent.DRAG_MOVE)

    method is_drag_start->Logical [macro]
      return (this.type == PointerEvent.DRAG_START)

    method is_drag_stop->Logical [macro]
      return (this.type == PointerEvent.DRAG_STOP)

    method is_move->Logical [macro]
      return (this.type == PointerEvent.MOVE)

    method is_press->Logical [macro]
      return (this.type == PointerEvent.PRESS)

    method is_press( button_index:Int32 )->Logical
      return (this.type == PRESS and index == button_index)

    method is_press_left->Logical
      return is_press( 0 )

    method is_press_right->Logical
      return is_press( 1 )

    method is_press_middle->Logical
      return is_press( 2 )

    method is_release->Logical [macro]
      return (this.type == PointerEvent.RELEASE)

    method is_release( button_index:Int32 )->Logical
      return (this.type == RELEASE and index == button_index)

    method is_release_left->Logical
      return is_release( 0 )

    method is_release_right->Logical
      return is_release( 1 )

    method is_release_middle->Logical
      return is_release( 2 )

    method operator+( offset:XY )->PointerEvent
      return PointerEvent( type, position+offset, delta, index, is_cancelled )

    method operator-( offset:XY )->PointerEvent
      return this + (-offset)

    method description->String
      local buffer = StringBuilder()
      buffer.print( "Pointer " )
      which (type)
        case MOVE:       buffer.print( "move" )
        case PRESS:      buffer.print( "press index " ).print( index )
        case RELEASE:    buffer.print( "release" )
        case DRAG_START: buffer.print( "drag start" )
        case DRAG_MOVE:  buffer.print( "drag move" )
        case DRAG_STOP:  buffer.print( "drag stop" )
      endWhich
      buffer.print( " at " ).print( position )
      if (is_consumed) buffer.print( " (consumed)" )

      return buffer->String
endClass


class ScrollEvent : Event
  PROPERTIES
    delta         : XY
    is_precise    : Logical
      # True for Apple Magic Mouse and Trackpad, AKA supports gestures and momentum.
      # If this is true then is_progress and is_momentum are valid (and vice versa).
    in_progress   : Logical
      # macOS: in_progress means that either the finger is still resting on the Magic Mouse/trackpad
      # or that a "momentum scroll" is active. Either way scroll events are guaranteed to continue
      # to be received until one where 'in_progress' is false.
    is_momentum   : Logical
    density       : Real64

  METHODS
    method init( delta, is_precise=false, in_progress=false, is_momentum=false, density=1 )

    method cloned->ScrollEvent
      return ScrollEvent( delta, &=is_precise, &=in_progress, &=is_momentum, &=density ).[ init(this) ]

    method description->String
      local buffer = StringBuilder().print( "Scroll " ).print( delta )
      buffer.print( " [$x]"(density) )
      if (in_progress) buffer.print( " [in progress]" )
      if (is_momentum) buffer.print( " [momentum]" )
      if (is_consumed) buffer.print( " (consumed)" )
      return buffer->String
endClass

class ScrollRate
  # macOS with Magic Mouse or trackpad:
  # - Tracks 0.25 seconds of continuous-gesture scroll data and accelerates
  #   the scroll deltas to allow behavior similar to built-in OS scrolling.
  #
  # Other OS or input device:
  # - Scales each scroll delta by 'base_scale' with no acceleration.
  PROPERTIES
    base_scale     : Real64
    delta          : XY
    history_x      = ScrollEvent[]
    history_y      = ScrollEvent[]
    acceleration_x = 1.0
    acceleration_y = 1.0

  METHODS
    method init( base_scale=5 )

    method add( e:ScrollEvent )->XY
      # Returns the scaled or accelerated scroll-delta.
      contingent
        necessary (e.is_precise)
        necessary (not e.is_momentum)

        delta = XY(
          _process<<history_x,x,acceleration_x>>(e),
          _process<<history_y,y,acceleration_y>>(e)
        )

      unsatisfied
        delta = e.delta * base_scale
        if (not e.is_precise) delta *= e.density
        history_x.clear
        history_y.clear
        acceleration_x = 1.0
        acceleration_y = 1.0

      endContingent

      return delta

    method _same_direction( v1:Real64, v2:Real64 )->Logical
      if (v1 == 0 or v2 == 0) return true  # 0 matches either sign
      return not ((v1 > 0) xor (v2 > 0))

    method _process<<$HISTORY,$XY,$ACCELERATION>>( e:ScrollEvent )->Real64
      while ($HISTORY.count and $HISTORY.first.timestamp < e.timestamp - 0.25) $HISTORY.remove_first

      local result = 0.0
      if ($HISTORY.count and _same_direction($HISTORY.first.delta.$XY,e.delta.$XY))
        $HISTORY.add( e )
        result += (forEach in $HISTORY).delta.$XY
        result /= $HISTORY.count
        if ($HISTORY.count == 1)
          $ACCELERATION = 1.0
        else
          result *= $ACCELERATION
        endIf
      else
        $HISTORY.[ clear, add(e) ]
        result = e.delta.$XY
        $ACCELERATION = 1.0
      endIf

      $ACCELERATION = ($ACCELERATION * 1.25).clamped_high( base_scale*2 )
      return result
endClass


