enum StringEncoding
  UTF8           = 0
  ASCII          = 1
  ASCII_256      = 2
  EXTENDED_ASCII = 2
  AUTODETECT     = 3
endEnum

class String
  GLOBAL METHODS
    method create( bytes:Byte[], encoding=StringEncoding.AUTODETECT:StringEncoding )->String
      if (encoding == StringEncoding.AUTODETECT)
        #local is_valid = bytes.is_valid_utf8
        #native @|printf( "is valid utf8:%d\n", (int)$is_valid );
#trace bytes.is_valid_utf8
        encoding = which{ bytes.is_valid_utf8:StringEncoding.UTF8 || StringEncoding.ASCII_256 }
      endIf

      which (encoding)
        case StringEncoding.UTF8, StringEncoding.ASCII
          return native( 'RogueString_create_from_utf8( (char*)($bytes->data->as_bytes), $bytes->count )' )->String
        case StringEncoding.ASCII_256
          # Count number of 2-byte characters
          local len = 0
          native @|unsigned char* src = $bytes->data->as_bytes - 1;
                  |for (int i=$bytes->count; --i>=0; )
                  |{
                  |  if (*(++src) & 0x80) ++$len;
                  |}

          # Convert ASCII-256 to UTF-8
          local new_count = bytes.count + len
          local utf8_bytes = Byte[]( bytes.count + len )
          utf8_bytes.count = new_count
          native @|src = $bytes->data->as_bytes + $bytes->count;
                  |unsigned char* dest = $utf8_bytes->data->as_bytes + $new_count;
                  |for (int i=$bytes->count; --i>=0; )
                  |{
                  |  unsigned char ch = *(--src);
                  |  if (ch & 0x80)
                  |  {
                  |    *(--dest) = 0x80 | (ch & 0x3F);
                  |    *(--dest) = 0xC0 | ((ch>>6) & 0x03);
                  |  }
                  |  else
                  |  {
                  |    *(--dest) = ch;
                  |  }
                  |}
                  |return RogueString_create_from_utf8( (char*)($utf8_bytes->data->as_bytes), $utf8_bytes->count );
        others
          throw Error( "Unsupported string encoding: " + encoding )
      endWhich

    method create( bytes:Byte[], i1:Int32, count:Int32 )->String
      return native( 'RogueString_create_from_utf8( (char*)($bytes->data->as_bytes+$i1), $count )' )->String

    method create( characters:Character[] )->String
      return native( 'RogueString_create_from_characters( $characters )' )->String

    method create( characters:StringBuilder )->String
      return create( characters.utf8 )

    method create( characters:StringBuilder, i1:Int32, count:Int32 )->String
      return create( characters.utf8, i1, count )

    method create( file:File, encoding=StringEncoding.AUTODETECT:StringEncoding )->String
      return file.load_as_string( encoding )

    method create( value:Value )->String
      return value->String

    method describe( obj:Object )->String
      if (obj) return obj.description
      return "null"

    method exists( string:String )->Logical
      # Returns false if the string is null or empty; otherwise returns true.
      return (string and string.count?)

    method operator==( a:String, b:String )->Logical
      if (a is null) return (b is null)
      else           return a.operator==( b )

    method operator==( a:String, b:StringBuilder )->Logical
      if (b is null) return (a is null)
      else           return b.operator==( a )

    method operator<>( a:String, b:String )->Int32
      if (a is null)
        if (b is null) return  0
        else           return -1
      else
        return a.operator<>( b )
      endIf

    method operator+( st:String, value:Byte )->String
      return which{ st || "null" }.operator+( value )

    method operator+( st:String, value:Character )->String
      return which{ st || "null" }.operator+( value )

    method operator+( st:String, value:Int32 )->String
      return which{ st || "null" }.operator+( value )

    method operator+( st:String, value:Logical )->String
      return which{ st || "null" }.operator+( value )

    method operator+( st:String, value:Int64 )->String
      return which{ st || "null" }.operator+( value )

    method operator+( st:String, value:Object )->String
      return which{ st || "null" }.operator+( value )

    method operator+( st:String, value:Real64 )->String
      return which{ st || "null" }.operator+( value )

    method operator+( st:String, value:Real32 )->String
      return which{ st || "null" }.operator+( value )

    method operator+( st:String, value:String )->String
      return which{ st || "null" }.operator+( value )

    method operator*( st:String, value:Int32 )->String
      if (st is null) return null
      return st.operator*( value )

    method operator*( count:Int32, string:String )->String
      if (string is null) return null
      return string.operator*( count )

    method operator/( prefix:String, suffix:String )->String
      return "$/$" (prefix.without_trailing('/'),suffix)

  METHODS
    method cloned->String
      return native( 'RogueString_create_from_utf8( ($this->utf8), $this->byte_count )' )->String

    method after( index:Int32 )->String
      # Returns the substring of this string that occurs after
      # the given index.
      #
      # Equivalent to `from(index+1)`.
      return from(index+1)

    method after_any( ch:Character, &ignore_case )->String
      local i = locate_last( ch, &=ignore_case )
      if (i.exists) return from( i.value+1 )
      else          return this

    method after_any( st:String, &ignore_case )->String
      local i = locate_last( st, &=ignore_case )
      if (i.exists) return from( i.value+st.count )
      else          return this

    method after_first( ch:Character, &ignore_case )->String
      local i = locate( ch, &=ignore_case )
      if (i.exists) return from( i.value+1 )
      else          return ""

    method after_first( st:String, &ignore_case )->String
      local i = locate( st, &=ignore_case )
      if (i.exists) return from( i.value+st.count )
      else          return ""

    method after_last( ch:Character, &ignore_case )->String
      local i = locate_last( ch, &=ignore_case )
      if (i.exists) return from( i.value+1 )
      else          return ""

    method after_last( st:String, &ignore_case )->String
      local i = locate_last( st, &=ignore_case )
      if (i.exists) return from( i.value+st.count )
      else          return ""

    method after_prefix( ch:Character, &ignore_case )->String
      if (begins_with(ch,&=ignore_case)) return after_first( ch, &=ignore_case )
      else                               return this

    method after_prefix( st:String, &ignore_case )->String
      if (begins_with(st,&=ignore_case)) return after_first( st, &=ignore_case )
      else                               return this

    method before( index:Int32 )->String
      # Returns the substring of this string that occur before
      # the given index.
      #
      # Equivalent to ''leftmost(index)''.
      return from(0,index-1)

    method before_first( ch:Character, &ignore_case )->String
      local i = locate( ch, &=ignore_case )
      if (i.exists) return from( 0, i.value-1 )
      else          return this

    method before_first( st:String, &ignore_case )->String
      local i = locate( st, &=ignore_case )
      if (i.exists) return from( 0, i.value-1 )
      else          return this

    method before_last( ch:Character, &ignore_case )->String
      local i = locate_last( ch, &=ignore_case )
      if (i.exists) return from( 0, i.value-1 )
      else          return this

    method before_last( st:String, &ignore_case )->String
      local i = locate_last( st, &=ignore_case )
      if (i.exists) return from( 0, i.value-1 )
      else          return this

    method before_suffix( ch:Character, &ignore_case )->String
      if (ends_with(ch,&=ignore_case)) return before_last( ch, &=ignore_case )
      else                             return this

    method before_suffix( st:String, &ignore_case )->String
      if (ends_with(st,&=ignore_case)) return before_last( st, &=ignore_case )
      else                             return this

    method begins_with( ch:Character, &ignore_case )->Logical
      if (ignore_case)
        return (count and this[0].to_lowercase == ch.to_lowercase)
      else
        return (count and this[0] == ch)
      endIf

    method begins_with( other:String, &ignore_case )->Logical
      return (count >= other.count and contains_at(other,0,&=ignore_case))

    method byte( byte_index:Int32 )->Byte
      return native( "$this->utf8[ $byte_index ]" )->Byte

    method byte_count->Int32
      return native( "$this->byte_count" )->Int32

    method capitalized->String
      if (count == 0) return this

      # Find the first letter
      forEach (ch at index in this)
        if (ch.is_letter)
          if (ch.is_uppercase) return this  # Already capitalized
          return this.leftmost(index) + Character(ch + ('A'-'a')) + this.from( index+1 )
        endIf
      endForEach

      # No letters found
      return this

    method clipped( &left=0:Int32, &right=0:Int32 )->String
      return from( left, count-(right+1) )

    method compare_to( other:String, &ignore_case )->Int32
      if (other is null) return 1
      if (ignore_case)
        $if (target("C++"))
          native @|if ($this == $other) return 0;
                  |
                  |RogueInt32 other_count = $other->byte_count;
                  |RogueInt32 limit = $this->byte_count;
                  |
                  |int result;
                  |if (limit == other_count)
                  |{
                  |  // Strings are same length
                  |  #ifdef ROGUE_PLATFORM_WINDOWS
                  |    result = strnicmp( $this->utf8, $other->utf8, limit );
                  |  #else
                  |    result = strncasecmp( $this->utf8, $other->utf8, limit );
                  |  #endif
                  |  if (result == 0) return 0;
                  |}
                  |else
                  |{
                  |  // Strings differ in length.  Compare the part that matches first.
                  |  if (limit > other_count) limit = other_count;
                  |  #ifdef ROGUE_PLATFORM_WINDOWS
                  |    result = strnicmp( $this->utf8, $other->utf8, limit );
                  |  #else
                  |    result = strncasecmp( $this->utf8, $other->utf8, limit );
                  |  #endif
                  |  if (result == 0)
                  |  {
                  |    // Equal so far - the shorter string comes before the longer one.
                  |    if (limit == other_count) return 1;
                  |    return -1;
                  |  }
                  |}
                  |if (result < 0) return -1;
                  |else            return 1;
        $endIf
      else
        return this <> other
      endIf

    method consolidated->String
      return StringConsolidationTable[ this ]

    method contains( ch:Character, &ignore_case )->Logical
      return locate(ch,&=ignore_case)?

    method contains( substring:String, &ignore_case )->Logical
      return locate(substring,&=ignore_case)?

    method contains_at( substring:String, at_index:Int32, &ignore_case )->Logical
      if (at_index < 0) return false

      if (ignore_case)
        if (at_index + substring.count > count) return false
        forEach (other_ch in substring)
          if (other_ch.to_lowercase != this[at_index].to_lowercase) return false
          ++at_index
        endForEach
        return true
      else
        $if (target("C++"))
          native @|RogueInt32 offset = RogueString_set_cursor( $this, $at_index );
                  |RogueInt32 other_count = $substring->byte_count;
                  |if (offset + other_count > $this->byte_count) return false;
                  |
                  |return (0 == memcmp($this->utf8 + offset, $substring->utf8, other_count));
        $endIf
      endIf

    method contains_pattern( pattern:String, &ignore_case )->Logical
      # Returns true if this string contains the pattern "*<pattern>*" - in other words any number of characters
      # can come before and after the matching pattern.
      #
      # The pattern is matched literally apart from the following special sequences and behavior:
      #   *    - Matches any number of characters.
      #   ?    - Matches any single character.
      #   $    - Like '*' but discards leading whitespace; is used as a marker in extract_string(s).
      #   $(I) - Matches an integer character sequence.
      #   $(R) - Matches a real number character sequence.
      #   $(#) - Matches a single digit 0-9
      #   $($) - Matches a single literal '$'.
      #   ' '  - A space matches 1 or more spaces and tabs.
      #
      # Finally, extra whitespace in this string that isn't matched in the pattern string is ignored as long
      # as the whitespace doesn't have alphanumeric characters on both sides.
      #
      # For example, "a += c".contains_pattern("a+=c") -> true
      # For example, "a b c".contains_pattern("abc") -> false
      return locate_pattern( pattern, &=ignore_case )?

    method count->Int32
      return native( '$this->character_count' )->Int32

    method count( look_for:Character )->Int32
      local result = 0
      if (look_for < 128)
        native @|int n = $this->byte_count;
                |char* src = $this->utf8 + n;
                |while (--n >= 0)
                |{
                |  if (*(--src) == $look_for) ++$result;
                |}
        return result

      else
        forEach (ch in this)
          if (ch == look_for) ++result
        endForEach

      endIf

      return result

    method count( look_for:String )->Int32
      local result = 0
      local n = look_for.count
      local pos = locate( look_for )
      while (pos.exists)
        ++result
        pos = locate( look_for, pos.value + n )
      endWhile
      return result


    method decode_base64->Byte[]
      local builder = StringBuilder( count+2 )
      forEach (ch in this)
        if (ch.is_base64_digit) builder.print( ch )
      endForEach
      local remove_count = 0
      while ((builder.count & 3) != 0) builder.print( '=' ); ++remove_count

      local base64 = builder->String
      local output_count = (base64.count * 3) / 4

      local result = Byte[]( output_count )
      local writer = BitWriter( result )
      local iterator = base64.iterator
      while (iterator.has_another)
        loop (4)
          writer.write( iterator.read.to_base64_value, 6 )
        endLoop
      endWhile
      writer.flush

      loop (remove_count) result.remove_last
      return result

    method description->String
      return this

    method ends_with( ch:Character, &ignore_case )->Logical
      if (ignore_case)
        return (count > 0 and this[count-1].to_lowercase == ch.to_lowercase)
      else
        return (count > 0 and this[count-1] == ch)
      endIf

    method ends_with( other:String, &ignore_case )->Logical
      local other_count = other.count
      return (count >= other_count and other_count > 0 and contains_at(other,count-other_count,&=ignore_case))

    method equals( other:String, &ignore_case )->Logical
      if (ignore_case)
        if (count != other.count) return false
        forEach (ch at i in this)
          if (ch.to_lowercase != other[i].to_lowercase) return false
        endForEach
        return true
      else
        return this == other
      endIf

    method extract_string( format:String, &ignore_case )->String
      # Extracts the string corresponding to the first '$' marker in the given format pattern.
      #
      # The format pattern is matched literally apart from the following special sequences and behavior:
      #   *    - Matches any number of characters.
      #   ?    - Matches any single character.
      #   $    - Like '*' but discards leading whitespace; is used as a marker in extract_string(s).
      #   $(I) - Matches an integer character sequence.
      #   $(R) - Matches a real number character sequence.
      #   $(#) - Matches a single digit 0-9
      #   $($) - Matches a single literal '$'.
      #   ' '  - A space matches 1 or more spaces and tabs.
      #
      # Finally, extra whitespace in this string that isn't matched in the pattern string is ignored as long
      # as the whitespace doesn't have alphanumeric characters on both sides.
      #
      # EXAMPLE
      #   println "<tag name='abc'/>".extract_string( "*'$'*" )
      #   # prints: abc
      local strings = extract_strings( format, &=ignore_case )
      if (not strings or strings.is_empty) return null
      return strings.first

    method extract_strings( format:String, &ignore_case )->String[]
      # Extracts multiple strings, each corresponding to a '$' marker in the format pattern.
      # See extract_string() for additional details.
      #
      # EXAMPLE
      #   println "position = (x,4)".extract_strings( "*($,$)" )
      #   # prints: [x,4]
      return extract_strings( format, String[], &=ignore_case )

    method extract_strings( format:String, results:String[], &ignore_case )->String[]
      local i1 = results.count

      local span = locate_pattern( format, &=ignore_case )
      if (not span) return null

      local i = span.value.index
      local n = span.value.count
      if (i > 0 or n < count) return null
      if (not substring(i,n)._extract_strings(0, n, format, 0, format.count, results, &=ignore_case)) return null

      # Extracted strings were added to 'results' in reverse order. Reverse the order of
      # all strings added after the original contents.
      local i2 = results.count - 1
      while (i1 < i2)
        results.swap( i1, i2 )
        ++i1
        --i2
      endWhile
      return results

    method _extract_strings( i0:Int32, remaining_count:Int32, format:String, f0:Int32, fcount:Int32,
        results:String[], &ignore_case )->Logical
      if (fcount == 0)
        while (remaining_count and (this[i0]==' ' or this[i0]=='\t') and remaining_count) ++i0; --remaining_count
        if (remaining_count > 0) return false
        return true
      endIf

      local format_ch = format[f0]
      contingent
        which (format_ch)
          case '*':
            # Conservatively match any number of characters
            forEach (n in 0..remaining_count)
              if (_extract_strings( i0+n, remaining_count-n, format, f0+1, fcount-1, results, &=ignore_case )) return results
            endForEach

          case ' ':
            # Match 1 or more spaces or tabs
            local n = 0
            while (n < remaining_count)
              local ch = this[i0+n]
              if (ch != ' ' and ch != '\t') escapeWhile
              ++n
            endWhile

            if (n == 0) return false

            return _extract_strings( i0+n, remaining_count-n, format, f0+1, fcount-1, results,
              &=ignore_case )

          case '$':
            # Match one or more characters and extract as a results
            while (remaining_count and (this[i0]==' ' or this[i0]=='\t')) ++i0; --remaining_count
            local m_start = i0

            if (fcount>=3 and format[f0+1] == '(')
              if (format[f0+2] == ')')
                f0     += 2
                fcount -= 2
              elseIf (fcount>=4 and format[f0+3] == ')')
                which (format[f0+2])
                  case 'I'
                    # Integer
                    local i1 = i0
                    local rcount = remaining_count
                    if (rcount and this[i1] == '-') ++i1; --rcount
                    local found_digit = false
                    while (rcount and this[i1].is_number) ++i1; --rcount; found_digit = true

                    if (found_digit)
                      if (_extract_strings(i1, rcount, format, f0+4, fcount-4, results, &=ignore_case))
                        results.add( substring(i0,i1-i0) )
                        return true
                      endIf
                    endIf

                  case 'R'
                    # Real number
                    local i1 = i0
                    local rcount = remaining_count
                    if (rcount and this[i1] == '-') ++i1; --rcount
                    local found_digit = false
                    while (rcount and this[i1].is_number) ++i1; --rcount; found_digit = true
                    if (rcount and this[i1] == '.') ++i1; --rcount
                    while (rcount and this[i1].is_number) ++i1; --rcount; found_digit = true
                    if (found_digit)
                      if (_extract_strings( i1, rcount, format, f0+4, fcount-4, results, &=ignore_case))
                        results.add( substring(i0,i1-i0) )
                        return true
                      endIf
                    endIf

                  case '#'
                    # Single digit 0-9
                    if (remaining_count and this[i0].is_number)
                      if (_extract_strings(i0+1, remaining_count-1, format, f0+4, fcount-4, results, &=ignore_case))
                        results.add( substring(m_start,1) )
                        return true
                      endIf
                    endIf

                  case '$'
                    # $($) matches a single literal $
                    if (remaining_count and this[i0] == '$')
                      if (_extract_strings( i0+1, remaining_count-1, format, f0+4, fcount-4, results, &=ignore_case))
                        return true
                      endIf
                    endIf
                endWhich

                return false

              endIf
            endIf

            forEach (n in 1..remaining_count)
              if (_extract_strings( i0+n, remaining_count-n, format, f0+1, fcount-1, results, &=ignore_case))
                results.add( substring(m_start,n) )
                return true
              endIf
            endForEach

          case '?':
            # Match any single character
            if (remaining_count == 0) return false
            return _extract_strings( i0+1, remaining_count-1, format, f0+1, fcount-1, results, &=ignore_case )

          case '\\':
            # Escape any especial meaning of the next character
            if (remaining_count == 0) return false
            if (fcount == 1)
              return _extract_strings( i0, remaining_count, format, f0+1, fcount-1, results, &=ignore_case )
            endIf
            ++f0
            --fcount
            format_ch = format[f0]
            sufficient true
          others
            sufficient true
        endWhich
        escapeContingent

      satisfied
        # Match one specific character
        if (remaining_count == 0) return false
        local ch = this[i0]
        if (ignore_case) ch = ch.to_lowercase; format_ch = format_ch.to_lowercase

        if (format_ch == ch)
          return _extract_strings( i0+1, remaining_count-1, format, f0+1, fcount-1, results, &=ignore_case )
        elseIf (ch == ' ' or ch == '\t')
          # Extra spaces and tabs okay as long as they're not between alphanumeric values or at the beginning
          # Count how many spaces and tabs in a row
          if (f0 > 0)
            local n = 1
            while (n < remaining_count)
              ch = this[i0+n]
              if (ch != ' ' and ch != '\t') escapeWhile
              ++n
            endWhile
            if (i0 == 0 or n == remaining_count or not this[i0-1].is_identifier or not this[i0+n].is_identifier)
              return _extract_strings( i0+n, remaining_count-n, format, f0, fcount, results, &=ignore_case )
            endIf
          endIf
        endIf
      endContingent

      return false

    method _pattern_match_count( i0:Int32, remaining_count:Int32, format:String, f0:Int32, fcount:Int32,
        &ignore_case )->Int32
      if (fcount == 0)
        # Taking this out in 1.8.1 - not sure why we're including additional whitespace at the end
        # of pattern matching. This might break something else but it should be worked around
        # another way.
        #while (remaining_count and (this[i0]==' ' or this[i0]=='\t') and remaining_count) ++i0; --remaining_count
        return i0
      endIf

      local format_ch = format[f0]
      contingent
        which (format_ch)
          case '*':
            if (fcount == 1)
              # Last pattern symbol - greedily match any number of characters
              local result = -1
              forEach (n in 0..remaining_count)
                local count = _pattern_match_count( i0+n, remaining_count-n, format, f0+1, fcount-1, &=ignore_case )
                if (count == -1) return result
                result = count
              endForEach
              return result
            else
              # Intermediate symbol - conservatively match any number of characters
              forEach (n in 0..remaining_count)
                local count = _pattern_match_count( i0+n, remaining_count-n, format, f0+1, fcount-1, &=ignore_case )
                if (count != -1) return count
              endForEach
              return -1
            endIf

          case ' ':
            # Match 1 or more spaces or tabs
            local n = 0
            while (n < remaining_count)
              local ch = this[i0+n]
              if (ch != ' ' and ch != '\t') escapeWhile
              ++n
            endWhile

            if (n == 0) return -1

            return _pattern_match_count( i0+n, remaining_count-n, format, f0+1, fcount-1, &=ignore_case )

          case '$':
            # Match one or more characters
            while (remaining_count and (this[i0]==' ' or this[i0]=='\t')) ++i0; --remaining_count

            if (fcount>=3 and format[f0+1] == '(')
              if (format[f0+2] == ')')
                f0     += 2
                fcount -= 2
              elseIf (fcount>=4 and format[f0+3] == ')')
                which (format[f0+2])
                  case 'I'
                    # Integer
                    local i1 = i0
                    local rcount = remaining_count
                    if (rcount and this[i1] == '-') ++i1; --rcount
                    local found_digit = false
                    while (rcount and this[i1].is_number) ++i1; --rcount; found_digit = true

                    if (found_digit)
                      return _pattern_match_count( i1, rcount, format, f0+4, fcount-4, &=ignore_case )
                    endIf

                  case 'R'
                    # Real number
                    local i1 = i0
                    local rcount = remaining_count
                    if (rcount and this[i1] == '-') ++i1; --rcount
                    local found_digit = false
                    while (rcount and this[i1].is_number) ++i1; --rcount; found_digit = true
                    if (rcount and this[i1] == '.') ++i1; --rcount
                    while (rcount and this[i1].is_number) ++i1; --rcount; found_digit = true
                    if (found_digit)
                      return _pattern_match_count( i1, rcount, format, f0+4, fcount-4, &=ignore_case )
                    endIf

                  case '#'
                    # Single digit 0-9
                    if (remaining_count and this[i0].is_number)
                      return _pattern_match_count( i0+1, remaining_count-1, format, f0+4, fcount-4, &=ignore_case )
                    endIf

                  case '$'
                    # $($) matches a single literal $
                    if (remaining_count and this[i0] == '$')
                      return _pattern_match_count( i0+1, remaining_count-1, format, f0+4, fcount-4, &=ignore_case )
                    endIf
                endWhich

                return -1

              endIf
            endIf

            if (fcount == 1)
              # Last pattern symbol - greedy match
              local result = -1
              forEach (len in 0..remaining_count)
                local n = _pattern_match_count( i0+len, remaining_count-len, format, f0+1, fcount-1, &=ignore_case )
                if (n == -1) return result
                result = i0+len
              endForEach
              return result
            else
              # Conservative match
              forEach (n in 1..remaining_count)
                local count = _pattern_match_count( i0+n, remaining_count-n, format, f0+1, fcount-1, &=ignore_case )
                if (count != -1) return count
              endForEach
              return -1
            endIf

          case '?':
            # Match any single character
            if (remaining_count == 0) return -1
            return _pattern_match_count( i0+1, remaining_count-1, format, f0+1, fcount-1, &=ignore_case )

          case '\\':
            # Escape any especial meaning of the next character
            if (remaining_count == 0) return -1
            if (fcount == 1)
              return _pattern_match_count( i0, remaining_count, format, f0+1, fcount-1, &=ignore_case )
            endIf
            ++f0
            --fcount
            format_ch = format[f0]
            sufficient true
          others
            sufficient true
        endWhich
        escapeContingent

      satisfied
        # Match one specific character
        if (remaining_count == 0) return -1
        local ch = this[i0]
        if (ignore_case) ch = ch.to_lowercase; format_ch = format_ch.to_lowercase

        if (format_ch == ch)
          return _pattern_match_count( i0+1, remaining_count-1, format, f0+1, fcount-1, &=ignore_case )
        elseIf (ch == ' ' or ch == '\t')
          # Extra spaces and tabs okay as long as they're not between alphanumeric values or at the beginning
          # Count how many spaces and tabs in a row
          if (f0 > 0)
            local n = 1
            while (n < remaining_count)
              ch = this[i0+n]
              if (ch != ' ' and ch != '\t') escapeWhile
              ++n
            endWhile
            if (i0 == 0 or n == remaining_count or not this[i0-1].is_identifier or not this[i0+n].is_identifier)
              return _pattern_match_count( i0+n, remaining_count-n, format, f0, fcount, &=ignore_case )
            endIf
          endIf
        endIf
      endContingent

      return -1

    method from( i1:Int32 )->String
      return from( i1, count-1 )

    method from( i1:Int32, i2:Int32 )->String
      if (i1 < 0)          i1 = 0
      elseIf (i2 >= count) i2 = count - 1

      if (i1 > i2)  return ""
      if (i1 == i2) return ""+this[i1]
      if (i1 == 0 and i2 == count-1) return this

      $if (target("C++"))
        native @|RogueInt32 byte_i1 = RogueString_set_cursor( $this, $i1 );
                |RogueInt32 byte_limit = RogueString_set_cursor( $this, $i2+1 );
                |int new_count = (byte_limit - byte_i1);
                |RogueString* result = RogueString_create_with_byte_count( new_count );
                |memcpy( result->utf8, $this->utf8+byte_i1, new_count );
                |return RogueString_validate( result );
      $endIf

    method from_first( ch:Character, &ignore_case )->String
      local i = locate( ch, &=ignore_case )
      if (not i) return ""
      return from( i.value )

    method from_first( st:String, &ignore_case )->String
      local i = locate( st, &=ignore_case )
      if (not i) return ""
      return from( i.value )

    method from_last( ch:Character, &ignore_case )->String
      local i = locate_last( ch, &=ignore_case )
      if (i.exists) return from( i.value )
      else          return ""

    method from_last( st:String, &ignore_case )->String
      local i = locate_last( st, &=ignore_case )
      if (i.exists) return from( i.value )
      else          return ""

    method get( index:Int32 )->Character
      return native( 'RogueString_character_at($this,$index)' )->Character

    method hash_code->Int32
      $if (target("C++")) return native('$this->hash_code')->Int32

    method indented( spaces:Int32 )->String
      local lines = split( '\n' )
      local builder = StringBuilder( count + lines.count*2 )
      forEach (line in lines)
        if (builder.count) builder.println
        if (spaces> 0)      builder.print( " ".times(spaces) ).print( line )
        elseIf (spaces < 0) builder.print( line.rightmost(spaces) )
      endForEach
      return builder->String

    method is_ascii->Logical
      # Returns 'true' if all character codes in this string are in the range 0..127.
      return native( "$this->is_ascii" )->Logical

    method is_false->Logical
      # Returns true if this string is "false", "f", "no", "n", "off", "disable", or "disabled", case-insensitive.
      #
      # The reason there is an is_false() instead of an is_true() is partly illustrated by the following example:
      #
      #   println Value(st)->Logical
      #   # "true" prints:  true
      #   # "false" prints: true (because any non-null Value string is considered logically true)
      #
      #   # Existing is_false()
      #   if (st.is_false) println false
      #   else             println Value(st)->Logical
      #   # "true" prints:  true
      #   # "false" prints: false
      #
      #   # Hypothetical is_true()
      #   if (st.is_true) println true
      #   else            println Value(st)->Logical
      #   # "true" prints:  true
      #   # "false" prints: true
      #
      # In other words, simply converting any string to Value will always give a to->Logical of true,
      # so is_false() provides a way to intercept strings that represent Logical false as a special case.
      if (this.equals( "false",    &ignore_case )) return true
      if (this.equals( "f",        &ignore_case )) return true
      if (this.equals( "no",       &ignore_case )) return true
      if (this.equals( "n",        &ignore_case )) return true
      if (this.equals( "off",      &ignore_case )) return true
      if (this.equals( "disable",  &ignore_case )) return true
      if (this.equals( "disabled", &ignore_case )) return true
      if (this.equals( "0" )) return true
      return false

    method is_integer->Logical
      if (count == 0) return false
      forEach (ch at index in this)
        if (ch == '-')
          if (index > 0) return false
        elseIf (not ch.is_number)
          return false
        endIf
      endForEach
      return true

    method is_number->Logical
      return this.is_real

    method is_real->Logical
      if (count == 0) return false

      local period_count = 0
      forEach (ch at index in this)
        if (ch == '-')
          if (index > 0) return false
        elseIf (ch == '.')
          ++period_count
          if (period_count == 2) return false
        elseIf (not ch.is_number)
          return false
        endIf
      endForEach

      return true

    method iterator->StringIterator
      return StringIterator( this, 0, count )

    method join( substrings:String[] )->String
      return join( substrings.iterator )

    method join( substrings:ListIterator<<String>> )->String
      local result = StringBuilder()
      local first = true
      forEach (s in substrings)
        if (not first) result.print(this)
        first = false
        result.print( s )
      endForEach
      return result->String

    method last->Character
      return this[ count-1 ]

    method left_justified( spaces:Int32, fill=' ':Character )->String
      if (count >= spaces) return this

      local buffer = StringBuilder( spaces )
      buffer.print( this )
      forEach (count..<spaces) buffer.print( fill )

      return buffer->String

    method leftmost( n:Int32 )->String
      if (n >= 0) return from( 0, n-1 )
      else        return from( 0, (count + n) - 1 )

    method leftmost_common_substring_count( other:String, max_count=null:Int32? )->Int32
      if (other is null) return false
      local max = count.or_smaller(other.count)
      if (max_count.exists) max = max.or_smaller( max_count.value )
      forEach (i in 0..<max)
        if (this[i] != other[i]) return i
      endForEach
      return max

    method locate( ch:Character, optional_i1=null:Int32?, &ignore_case )->Int32?
      local i = 0
      local limit = count
      if (optional_i1.exists) i = optional_i1.value

      if (ignore_case)
        while (i < limit)
          if (this[i].to_lowercase == ch.to_lowercase) return i
          ++i
        endWhile
      else
        while (i < limit)
          if (this[i] == ch) return i
          ++i
        endWhile
      endIf
      return null

    method locate( other:String, optional_i1=null:Int32?, &ignore_case )->Int32?
      local other_count = other.count
      if (other_count == 1) return locate( other[0], optional_i1 )

      local this_limit = (count - other_count) + 1
      if (other_count == 0 or this_limit <= 0) return null

      forEach (i in which{optional_i1||0}..<this_limit)
        if (contains_at(other,i,&=ignore_case)) return i
      endForEach

      return null

    method locate_last( ch:Character, starting_index=null:Int32?, &ignore_case )->Int32?
      local i = count - 1
      if (starting_index.exists) i = starting_index.value

      if (ignore_case)
        while (i >= 0)
          if (this[i].to_lowercase == ch.to_lowercase) return i
          --i
        endWhile
      else
        while (i >= 0)
          if (this[i] == ch) return i
          --i
        endWhile
      endIf
      return null

    method locate_last( other:String, starting_index=null:Int32?, &ignore_case )->Int32?
      local other_count = other.count
      if (other_count == 1) return locate_last( other[0], starting_index )

      local this_limit = (count - other_count) + 1
      if (other_count == 0 or this_limit <= 0) return null

      local i : Int32
      if (starting_index)
        i = starting_index.value + 1
        if (i > this_limit) i = this_limit
      else
        i = this_limit
      endIf

      while (native("--$i")->Int32 >= 0)
        if (contains_at(other,i,&=ignore_case)) return i
      endWhile

      return null

    method locate_nth( ch:Character, n:Int32, optional_i1=null:Int32?, &ignore_case )->Int32?
      # n=1 finds the first match from the left side (or optional first index), etc.
      local index = locate( ch, optional_i1, &=ignore_case )

      loop n - 1
        if (not index) return null
        index = locate( ch, index.value+1, &=ignore_case )
      endLoop

      return index

    method locate_nth( other:String, n:Int32, optional_i1=null:Int32?, &ignore_case )->Int32?
      # n=1 finds the first match from the left side (or optional first index), etc.
      local index = locate( other, optional_i1, &=ignore_case )

      loop n - 1
        if (not index) return null
        index = locate( other, index.value+1, &=ignore_case )
      endLoop

      return index

    method locate_nth_last( ch:Character, n:Int32, optional_i1=null:Int32?, &ignore_case )->Int32?
      # n=1 finds the first match from the right side (or optional first index), etc.
      local index = locate_last( ch, optional_i1, &=ignore_case )

      loop n - 1
        if (not index) return null
        index = locate_last( ch, index.value-1, &=ignore_case )
      endLoop

      return index

    method locate_nth_last( other:String, n:Int32, optional_i1=null:Int32?, &ignore_case )->Int32?
      # n=1 finds the first match from the right side (or optional first index), etc.
      local index = locate_last( other, optional_i1, &=ignore_case )

      loop n - 1
        if (not index) return null
        index = locate_last( other, index.value-1, &=ignore_case )
      endLoop

      return index

    method locate_pattern( pattern:String, i1=0:Int32, &ignore_case )->Span?
      # EXAMPLE
      #   "ab cd ef gh ij".locate_pattern("cd $ gh") -> Span(3,8)
      forEach (i in i1..<count)
        local n = _pattern_match_count( i, count-i, pattern, 0, pattern.count, &=ignore_case )
        if (n != -1) return Span( i, n-i )
      endForEach
      return null

    method longest_line->Int32
      local longest = 0
      local cur = 0

      forEach (ch in this)
        which (ch)
          case '\r': nextIteration
          case '\n': longest .= or_larger(cur); cur = 0
          others:    ++cur
        endWhich
      endForEach

      return longest.or_larger( cur )

    method matches_pattern( pattern:String, &ignore_case )->Logical
      # Returns true if this string matches the given pattern.
      #
      # The pattern is matched literally apart from the following special sequences and behavior:
      #   *    - Matches any number of characters.
      #   ?    - Matches any single character.
      #   $    - Like '*' but discards leading whitespace; is used as a marker in extract_string(s).
      #   $(I) - Matches an integer character sequence.
      #   $(R) - Matches a real number character sequence.
      #   $(#) - Matches a single digit 0-9
      #   $($) - Matches a single literal '$'.
      #   ' '  - A space matches 1 or more spaces and tabs.
      #
      # Finally, extra whitespace in this string that isn't matched in the pattern string is ignored as long
      # as the whitespace doesn't have alphanumeric characters on both sides.
      #
      # For example, "a += c".matches_pattern("a+=c") -> true
      # For example, "a b c".matches_pattern("abc") -> false
      local span = locate_pattern( pattern, &=ignore_case )
      if (not span) return false
      return span.value.index == 0 and span.value.count == count

    method operator+( value:Byte )->String
      return (this + value->Int32)

    method operator+( value:Character )->String
      return StringBuilder().print( this ).print( value )->String

    method operator+( value:Int32 )->String
      return StringBuilder().print( this ).print( value )->String

    method operator==( value:String )->Logical
      if (value is null) return false
      if (this.hash_code != value.hash_code or this.count != value.count) return false
      return (native("(0==memcmp($this->utf8,$value->utf8,$this->byte_count))")->Logical)

    method operator==( value:StringBuilder )->Logical
      if (value is null) return false
      return (value == this)  # invoke the existing operator== method on value

    method operator<>( other:String )->Int32
      if (other is null) return 1
      $if (target("C++"))
        native @|if ($this == $other) return 0;
                |
                |RogueInt32 other_count = $other->byte_count;
                |RogueInt32 limit = $this->byte_count;
                |
                |int result;
                |if (limit == other_count)
                |{
                |  // Strings are same length
                |  result = memcmp( $this->utf8, $other->utf8, limit );
                |  if (result == 0) return 0;
                |}
                |else
                |{
                |  // Strings differ in length.  Compare the part that matches first.
                |  if (limit > other_count) limit = other_count;
                |  result = memcmp( $this->utf8, $other->utf8, limit );
                |  if (result == 0)
                |  {
                |    // Equal so far - the shorter string comes before the longer one.
                |    if (limit == other_count) return 1;
                |    return -1;
                |  }
                |}
                |if (result < 0) return -1;
                |else            return 1;
      $endIf

    method operator+( value:Logical )->String
      if (value) return this + "true"
      else       return this + "false"

    method operator+( value:Int64 )->String
      return StringBuilder().print( this ).print( value )->String

    method operator+( value:Object )->String
      if (value) return this + value->String
      else       return this + "null"

    method operator+( value:Real64 )->String
      return StringBuilder().print( this ).print( value )->String

    method operator+( value:Real32 )->String
      return (this + value->Real64)

    method operator+( value:String )->String
      if (value is null) return this + "null"
      if (count == 0) return value
      if (value.count == 0) return this
      return StringBuilder().print( this ).print( value )->String

    method operator*( value:Int32 )->String
      return this.times( value )

    method pluralized( quantity:Int32 )->String
      # Returns a pluralized form of this string.
      #
      # This string may be of the form "singlar" or "singlar/plural",
      # where both singular and plural parts may contain a "#"
      # to indicate where the given ''quantity'' should be inserted.
      #
      # If the string only contains the "singular" part, first a
      # substring of the form "(s)" or "(es)" (etc.) is looked for.
      # If that exists, it is included in the result if the string
      # is plural and omitted if the string is singular.
      #
      # If there is no "(s)" (etc.) then either "s" or "es" is
      # inserted after the last letter - "es" is used only when the
      # last letter is an "s" already.
      #
      # Examples:
      #
      #   "cat".pluralized(1)   # returns: cat
      #   "cat".pluralized(2)   # returns: cats
      #   "My # glass.".pluralized(1)  # returns: My 1 glass.
      #   "My # glass.".pluralized(2)  # returns: My 2 glasses.
      #   "a thief./# thieves".pluralized(1)   # returns: a thief.
      #   "a thief./# thieves".pluralized(40)  # returns: 40 thieves.
      #   "# match(es) found".pluralized(1)    # returns: 1 match found
      #   "# match(es) found".pluralized(0)    # returns: 0 matches found
      local st = this.replacing( "#", ""+quantity )

      if (st.contains('/'))
        if (quantity == 1) return st.before_first( '/' )
        else               return st.after_last( '/' )

      else
        local alt1 = st.locate('(')
        if (alt1.exists)
          local alt2 = st.locate(')',alt1.value+1)
          if (not alt2.exists) return this

          if (quantity == 1)
            return st.before(alt1.value) + st.after(alt2.value)
          endIf

          # plural
          return "$$$" (st.before(alt1.value),st.from(alt1.value+1,alt2.value-1),st.after(alt2.value))
        else
          if (quantity == 1) return st

          # plural
          local index = 0
          local i = st.count
          while (i > 0)
            --i
            if (st[i].is_letter) index = i; escapeWhile
          endWhile

          if (st[index] == 's') return "$es$" (st.before(index+1),st.after(index))
          else                  return "$s$" (st.before(index+1),st.after(index))
        endIf

      endIf

    method reader->StringReader
      return StringReader( this )

    method replacing( look_for:Character, replace_with:Character, &ignore_case )->String
      if (not contains(look_for,&=ignore_case)) return this

      local result = StringBuilder( count )

      if (ignore_case)
        look_for = look_for.to_lowercase
        forEach (ch in this)
          if (ch.to_lowercase == look_for) result.print( replace_with )
          else                             result.print( ch )
        endForEach
      else
        forEach (ch in this)
          if (ch == look_for) result.print( replace_with )
          else                result.print( ch )
        endForEach
      endIf

      return result->String

    method replacing( look_for:Character, replace_with:String, &ignore_case )->String
      # Returns a modified string where all instances of
      # ''look_for'' are replaced with ''replace_with''.
      if (not contains(look_for,&=ignore_case)) return this

      local buffer = StringBuilder(count*1.1)
      if (ignore_case)
        look_for .= to_lowercase
        forEach (ch in this)
          if (ch.to_lowercase == look_for) buffer.print( replace_with )
          else                             buffer.print( ch )
        endForEach
      else
        forEach (ch in this)
          if (ch == look_for) buffer.print( replace_with )
          else                buffer.print( ch )
        endForEach
      endIf

      return buffer->String

    method replacing( look_for:String, replace_with:String, &ignore_case )->String
      # Returns a modified string where all instances of
      # ''look_for'' are replaced with ''replace_with''.
      local i1 = this.locate(look_for,&=ignore_case)
      if (not i1.exists) return this

      local i0 = 0

      local buffer = StringBuilder( count*1.1 )
      while (i1.exists)
        forEach (i in i0..<i1.value) buffer.print( this[i] )
        buffer.print( replace_with )
        i0 = i1.value + look_for.count
        i1 = this.locate(look_for,i0,&=ignore_case)
      endWhile
      forEach (i in i0..<this.count) buffer.print( this[i] )
      return buffer->String

    method replacing_at( index:Int32, n:Int32, replace_with:String )->String
      use builder = StringBuilder.pool
        builder.reserve( (count+(replace_with.count - n)).clamped_low(0) )
        forEach (i in 0..<index) builder.print this[i]
        builder.print replace_with
        forEach (i in index+n..<count) builder.print this[i]
        return builder->String
      endUse

    method replacing_pattern( search_pattern:String, replacement_pattern:String, parens="()":String )->String
      # Search pattern has same "$*?" wildcard format as .extract_strings():
      #   - '$' acts as '*' but also denotes a piece to be extracted.
      # Replacement pattern contains '$' to denote implicitly-paired points of substitution
      # or'$(0)' etc. to indicate the 0th, etc. extracted value. '$()' can be used to
      # escape the special meaning of a successive '(0)' and '$($)' can be written to
      # indicate a literal '$'.
      #
      # If this string contains line breaks then the search is performed on separate lines
      # in order to avoid excessive search times by wildcards.
      #
      # Examples:
      #   "Alice and Bob".replacing_pattern( "$ and $", "$ & $" ) -> "Alice & Bob"
      #   "Alice and Bob".replacing_pattern( "$ and $", "$(1) and $(0)" ) -> "Bob and Alice"
      if (not parens or parens.count < 2) parens = "()"
      local open_paren = parens[0]
      local close_paren = parens[1]
      if (this.contains('\n'))
        contingent
          # Do an initial check to make sure the pattern occurs to avoid a bunch of
          # unnecessary string allocations otherwise.
          forEach (line in LineReader(this))
            sufficient (line.contains_pattern(search_pattern))
          endForEach
          return this  # not found

        satisfied
          # The pattern occurs somewhere in this string
          local result = StringBuilder( count )
          forEach (line in LineReader(this))
            result.println( line.replacing_pattern(search_pattern,replacement_pattern,parens) )
          endForEach
          return result->String

        endContingent

      else
        # No newlines.
        local span = this.locate_pattern( search_pattern )
        if (span)
          block span = span.value
            if (span.index > 0 or span.count < count)
              # Extract the subset containing the pattern and perform the replacement on that
              local replacement = substring(span).replacing_pattern(search_pattern,replacement_pattern,parens)
              local remaining = rightmost( count-(span.index+span.count) ).replacing_pattern( search_pattern, replacement_pattern, parens )
              return leftmost(span.index) + replacement + remaining
            endIf
          endBlock
        endIf

        local parts = this.extract_strings( search_pattern )
        if (not parts) return this  # no change

        local result = StringBuilder( count )
        local scanner = Scanner( replacement_pattern )
        local i = 0
        while (scanner.has_another)
          if (scanner.consume('\\'))
            if (scanner.has_another) result.print( scanner.read )
          elseIf (scanner.consume('$'))
            if (scanner.consume(open_paren))
              if (scanner.consume(close_paren))
                result.print( parts[i] ); i = (i + 1) % parts.count
              else
                local n = 0
                while (scanner.has_another and not scanner.consume(close_paren))
                  n = n * 10 + scanner.read.to_number
                endWhile
                result.print( parts[n%parts.count] )
              endIf
            else
              result.print( parts[i] ); i = (i + 1) % parts.count
            endIf
          else
            result.print( scanner.read )
          endIf
        endWhile
        return result->String
      endIf

    method reversed->String
      local buffer = StringBuilder(count)
      forEach (ch in this step -1)
        buffer.print( ch )
      endForEach
      return buffer->String

    method right_justified( spaces:Int32, fill=' ':Character )->String
      if (count >= spaces) return this

      local buffer = StringBuilder( spaces )
      forEach (count..<spaces) buffer.print( fill )
      buffer.print( this )

      return buffer->String

    method rightmost( n:Int32 )->String
      local this_count = count
      if (n < 0) return from( -n, this_count-1 )
      else       return from( this_count-n, this_count-1 )

    method rightmost_common_substring_count( other:String )->Int32
      if (other is null) return false
      local max = count.or_smaller(other.count)
      local this_i =  count - 1
      local other_i = other.count - 1
      forEach (i in 0..<max)
        if (this[this_i] != other[other_i]) return i
        --this_i
        --other_i
      endForEach
      return max

    method split( separator:Character, &ignore_case )->String[]
      local result = String[]

      local i1 = 0
      local i2 = locate( separator, i1, &=ignore_case )
      while (i2.exists)
        result.add( from(i1,i2.value-1) )
        i1 = i2.value + 1
        i2 = locate( separator, i1, &=ignore_case )
      endWhile

      result.add( from(i1) )

      return result

    method split( separator:String, &ignore_case )->String[]
      local result = String[]
      local separator_count = separator.count

      local i1 = 0
      local i2 = locate( separator, i1, &=ignore_case )
      while (i2.exists)
        result.add( from(i1,i2.value-1) )
        i1 = i2.value + separator_count
        i2 = locate( separator, i1, &=ignore_case )
      endWhile

      result.add( from(i1) )

      return result

    method split->String[]
      # Splits the string on whitespace

      local result = String[]
      local start = -1
      local current = 0
      forEach (ch in this)
        which (ch)
          case ' ', '\t', '\n':
            if start >= 0
              result.add( this.from(start, current-1) )
              start = -1
            endIf
          others:
            if start < 0
              start = current
            endIf
          endWhich
        current++
      endForEach

      if start >= 0
        result.add( this.from(start, current-1) )
      endIf

      return result

    method substring( i1:Int32 )->String
      return from( i1 )

    method substring( i1:Int32, n:Int32 )->String
      if (n < 0)
        n = (count - i1) + n
        if (n <= 0) return ""
      endIf
      return from( i1, i1+(n-1) )

    method substring( span:Span )->String
      return substring( span.index, span.count )

    method times( n:Int32 )->String
      if (n <= 0) return ""
      if (n == 1) return this

      local builder = StringBuilder( count * n )
      forEach (1..n) builder.print( this )

      return builder->String

    method to->Byte[]
      local result = Byte[]( byte_count )
      forEach (i in 0..<byte_count) result.add( this.byte(i) )
      return result

    method to->Character[]
      local result = Character[]( count )
      forEach (ch in this) result.add( ch )
      return result

    method to->Int32( base=10:Int32 )
      if (count == 0) return 0
      if (this.contains(','))
        use builder = StringBuilder.pool
          forEach (ch in this)
            if (ch != ',') builder.print ch
          endForEach
          return builder->Int32
        endUse
      endIf
      return native( "(RogueInt32)strtol( (char*)$this->utf8, 0, $base )" )->Int32

    method to->Int64( base=10:Int32 )
      if (count == 0) return 0
      if (this.contains(','))
        use builder = StringBuilder.pool
          forEach (ch in this)
            if (ch != ',') builder.print ch
          endForEach
          return builder->Int64
        endUse
      endIf
      return native( "(RogueInt64)strtoll( (char*)$this->utf8, 0, $base )" )->Int64

    method to->Object
      return this

    method to->Real64
      if (count == 0) return 0
      if (this.contains(','))
        use builder = StringBuilder.pool
          forEach (ch in this)
            if (ch != ',') builder.print ch
          endForEach
          return builder->Real64
        endUse
      endIf
      return native( "strtod( (char*)$this->utf8, 0 )" )->Real64

    method to->String
      return this

    method to->Value
      return Value( this )

    method to_lowercase->String
      local has_uc = false
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') has_uc = true; escapeForEach
      endForEach

      if (not has_uc) return this

      local result = StringBuilder( count )
      forEach (ch in this)
        if (ch >= 'A' and ch <= 'Z') result.print( ((ch-'A')+'a')->Character )
        else                         result.print( ch )
      endForEach
      return result->String

    method to_escaped_ascii( additional_characters_to_escape="":String )->String
      use builder = StringBuilder.pool
        (forEach in this).print_escaped_ascii( builder, additional_characters_to_escape )
        if (builder == this) return this  # no escapes
        else                 return builder->String
      endUse
      return this  # won't happen but C++ doesn't realize it

    method to_plain_ascii->String
      # Converts or strips any non-ASCII Unicode.
      # - Converts letters with diacritical marks to plain ASCII letters (ä -> a).
      # - Converts some other letter-like symbols into letters.
      # - Strips out any other characters with Unicode values greater than 127.

      # Make one pass to see if there's anything that needs converting or removing.
      contingent
        forEach (ch in this)
          sufficient (ch & !0x7F)
        endForEach
        return this  # no changes required
      endContingent

      # Original Unicode
      #              ''¡¢£ ¥¦ ¨         ²³´µ  ¸¹     ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ ØÙÚÛÜÝÞßàáâãäåæ''
      #              ''çèéêëìíîïðñòóôõö øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħ''...
      #              ''ĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧ''...
      #              ''ŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ''
      local lookup = ''!cL Y| "         23'u  ,1     ?AAAAAAACEEEEIIIIENOOOOO OUUUUYPsaaaaaaa''...
                     ''ceeeeiiiienooooo ouuuuypyAaAaAaCcCcCcCcDdDdEeEeEeEeEeGgGgGgGgHhHh''...
                     ''IiIiIiIiIiIiJjKkkLlLlLlLlLlNnNnNnnNnOoOoOoOoRrRrRrSsSsSsSsTtTtTt''...
                     ''UuUuUuUuUuUuWwYyYZzZzZzs''

      use result = StringBuilder.pool
        result.reserve( this.count )

        forEach (ch in this)
          if (ch & !0x7F)
            which (ch)
              case 'Æ': result.print "AE"
              case 'æ': result.print "ae"
              case 'Œ': result.print "OE"
              case 'œ': result.print "oe"
              others
                if (ch >= 161 and ch <= 383)
                  local ch2 = lookup[ ch-161 ]
                  if (ch2 != ' ') result.print ch2
                endIf
            endWhich
          else
            result.print ch
          endIf
        endForEach
        return result
      endUse

    method to_uppercase->String
      local has_lc = false
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'z') has_lc = true; escapeForEach
      endForEach

      if (not has_lc) return this

      local result = StringBuilder( count )
      forEach (ch in this)
        if (ch >= 'a' and ch <= 'z') result.print( ((ch-'a')+'A')->Character )
        else                         result.print( ch )
      endForEach
      return result->String

    method to_utf8->Byte[]
      return this->Byte[]

    method trimmed->String
      # Trim white spaces on both ends
      local i1 = 0
      local i2 = count - 1

      while (i1 <= i2)
        if     (this[i1] <= ' ') ++i1
        elseIf (this[i2] <= ' ') --i2
        else                     escapeWhile
      endWhile

      if (i1 > i2) return ""
      if (i1 == 0 and i2 == count-1) return this
      return from( i1, i2 )

    method unleft( n:Int32 )->String
      # "abc".unleft(1) -> bc
      if (n <= 0) return this
      else        return from( n )

    method unright( n:Int32 )->String
      # "abc".unright(1) -> ab
      if (n <= 0) return this
      else        return from( 0, (count - n) - 1 )


    method up_to_first( ch:Character, &ignore_case )->String
      local i = locate( ch, &=ignore_case )
      if (i.exists) return from( 0, i.value )
      else          return this

    method up_to_first( st:String, &ignore_case )->String
      local i = locate( st, &=ignore_case )
      if (i.exists) return from( 0, i.value+(st.count-1) )
      else          return this

    method up_to_last( ch:Character, &ignore_case )->String
      local i = locate_last( ch, &=ignore_case )
      if (i.exists) return from( 0, i.value )
      else          return this

    method up_to_last( st:String, &ignore_case )->String
      local i = locate_last( st, &=ignore_case )
      if (i.exists) return from( 0, i.value+(st.count-1) )
      else          return this

    method with_trailing( ch:Character )->String
      # Returns a string that ends with the given character. If this string already ends with the
      # given character then this string is returned unchanged.
      if (this.ends_with(ch)) return this
      return this + ch

    method with_trailing( text:String )->String
      # Returns a string that ends with the given text. If this string already ends with the given
      # text then this string is returned unchanged.
      if (this.ends_with(text)) return this
      return this + text

    method without_trailing( ch:Character )->String
      # Like before_suffix() but removes multiple copies of the given character.
      local result = this
      local next   = result.before_suffix( ch )
      while (result != next)
        result = next
        next   = result.before_suffix( ch )
      endWhile
      return result

    method without_trailing( text:String )->String
      # Like before_suffix() but removes multiple copies of the given string.
      local result = this
      local next   = result.before_suffix( text )
      while (result != next)
        result = next
        next   = result.before_suffix( text )
      endWhile
      return result

    method word_wrap( width:Int32, allow_break_after=null:String )->String[]
      # Returns a word-wrapped version of this string as a list of lines.
      # Existing newlines characters will cause a new line to begin
      # immediately.  Spaces immediately following existing newline
      # characters are preserved.
      return word_wrap( width, StringBuilder(), allow_break_after )->String.split('\n')

    method word_wrap( width:Int32, buffer:StringBuilder, allow_break_after=null:String )->StringBuilder
      # Prints a word-wrapped version of this string to the given
      # StringBuilder.  Existing newlines characters will cause a new line to
      # begin immediately.  Spaces immediately following existing newline
      # characters are preserved.
      local i1, i2 : Int32
      local len = count

      if (len == 0) return buffer

      if (width <= 0)
        # Print with no wrapping
        buffer.print( this )
        return buffer
      endIf

      local w = width
      local initial_indent = 0
      forEach (ch in this)
        if (ch != ' ') escapeForEach
        ++initial_indent
        --w
        ++i1
      endForEach

      if (w <= 0)
        w = width
        initial_indent = 0
        buffer.println
      else
        loop (width-w) buffer.print ' '
      endIf

      local needs_newline = false
      while (i2 < len)

        # find first \n, last space, or last break-after character
        while ((i2-i1) < w and i2 < len and this[i2] != '\n') i2++

        if ((i2-i1) == w)
          # No \n in allowed width
          if (i2 >= len)
            # The rest of the text will fit as-is.
            i2 = len
          elseIf (this[i2] != '\n')
            # Look for the last space within the given width
            while (this[i2]!=' ' and i2>i1) i2--

            if (i2 == i1)
              # Not found - move cursor to end and look for the last break-after
              # character.
              i2 = i1 + w
              if (allow_break_after)
                while (i2 > i1 and not allow_break_after.contains(this[i2-1]) and i2>i1) i2--
                if (i2 == i1)
                  # Could not find a break - just use the first 'w' characters.
                  i2 = i1 + w
                endIf
              endIf
            endIf
          endIf
        endIf

        if (needs_newline)
          buffer.println
          if (initial_indent)
            loop (initial_indent) buffer.print( ' ' )
          endIf
        endIf

        forEach (i in i1..(i2-1)) buffer.print( this[i] )
        needs_newline = true

        if (i2 == len)
          return buffer
        else
          which (this[i2])
            case ' ':
              # Discard trailing spaces
              while (i2<len and this[i2]==' ') i2++

              if (i2<len and this[i2]=='\n') i2++

              i1 = i2

            case '\n':
              ++i2

              w = width
              initial_indent = 0
              forEach (i in i2..<len)
                if (this[i] != ' ') escapeForEach
                ++initial_indent
                --w
                ++i2
              endForEach

              if (w <= 0)
                w = width
                initial_indent = 0
              else
                loop (width-w) buffer.print ' '
              endIf
          endWhich

          i1 = i2

        endIf
      endWhile

      return buffer

    method word_wrapped( width:Int32, allow_break_after=null:String )->String
      return word_wrap( width, StringBuilder(), allow_break_after )->String

endClass

class StringIterator( string:String, position:Int32, count:Int32 ) [compound]
  GLOBAL METHODS
    method create( string:String )->StringIterator
      return StringIterator( string, 0, string.count )

  METHODS
    method has_another->Logical
      return (position < count)

    method has_another( n:Int32 )->Logical
      return (position + n <= count)

    method peek->Character
      if (position == count) return 0
      return string[ position ]

    method read->Character [mutating]
      ++position
      return string[ position-1 ]

    method read_another->Character? [mutating]
      if (position == count) return null
      ++position
      return string[ position-1 ]

    method description->String
      use builder=StringBuilder.pool
        builder.reserve( count - position )
        builder.print( forEach in this )
        return builder->String
      endUse
endClass

class StringReader : Reader<<Character>>
  PROPERTIES
    position   : Int32
    count      : Int32
    string     : String

  METHODS
    method init( string )
      if (string) count = string.count

    method has_another->Logical
      return (position < count)

    method has_another( n:Int32 )->Logical
      return (position + n <= count)

    method peek->Character
      if (position == count) return 0
      return string[ position ]

    method read->Character
      ++position
      return string[ position - 1 ]

    method reset
      seek( 0 )

    method seek( pos:Int32 )
      if (pos < 0) pos = 0
      elseIf (pos > count) pos = count
      position = pos
endClass


class StringConsolidationTable : StringTable<<String>> [singleton]
  # Used by the consolidated() method to map equivalent strings to the same
  # string object.  Reduces memory usage and allows the use of the 'is' test
  # rather than the '==' test.  Similar to Java's intern() method.
  METHODS
    method get( st:String )->String
      local result = prior.get( st )
      if (result) return result
      this[ st ] = st
      return st

    method get( buffer:StringBuilder )->String
      local result = prior.get( buffer )
      if (result) return result

      result = buffer->String
      this[ result ] = result
      return result
endClass


class Span( index:Int32, count:Int32 ) [compound]
  METHODS
    method i2->Int32
      return index + (count-1)

    method limit->Int32
      return index + count

    method description->String
      return "@$ x$"(index,count)
endClass

