module UI
  uses Utility/Action
  uses Utility/Node
  uses Utility/WorkList

class UIComponent : Node<<UIComponent>>
  DEFINITIONS
    FLAG_FIXED_WIDTH           = 1
    FLAG_FIXED_HEIGHT          = 2
    FLAG_SHRINK_TO_FIT_WIDTH   = 4
    FLAG_SHRINK_TO_FIT_HEIGHT  = 8
    FLAG_WIDTH_MASK            = (FLAG_FIXED_WIDTH  | FLAG_SHRINK_TO_FIT_WIDTH)
    FLAG_HEIGHT_MASK           = (FLAG_FIXED_HEIGHT | FLAG_SHRINK_TO_FIT_HEIGHT)
    FLAG_SIZE_MASK             = (FLAG_WIDTH_MASK   | FLAG_HEIGHT_MASK)
    FLAG_HIDDEN                = 16
    FLAG_DISABLE_INPUT         = 32

  PROPERTIES
    position   : XY
    size       : XY
    flags      : Int32
    attributes : UIAttribute
    actions    : Action

  METHODS
    method init

    method init( content:UIComponent )
      add( content )

    method init( size )
      fixed_size = size

    method alignment->Anchor
      # 'alignment' affects text within this component and subcomponents. Unlike
      # 'anchor', 'alignment' is propagated to child components until a new alignment
      # is set.
      return UIAttributes.alignment( this )

    method after( e:KeyEvent )
      noAction

    method after( e:PointerEvent )
      noAction

    method after( e:ScrollEvent )
      noAction

    method after( e:TextEvent )
      noAction

    method after_draw
      UI.theme._dispatch_after_draw( this )

    method after_draw<<$Theme>>( theme:$Theme )  [propagated]
      # Components can override this method per-theme and draw themselves or
      # they can let the theme draw them.
      theme.after_draw( this )

    method after_prepare_layout
      UI.theme._dispatch_after_prepare_layout( this )

    method after_prepare_layout<<$Theme>>( theme:$Theme )  [propagated]
      theme.after_prepare_layout( this )

    method after_resize
      noAction

    method after_update
      noAction

    method after_update_layout
      noAction

    method anchor->Anchor
      return UIAttributes.anchor( this )

    method bounds->Box
      return Box( position, size )

    method broadcast_message( message:Value )
      UI.broadcast_message( message )

    method capture_keyboard_focus->Logical
      if (UI.keyboard_focus and UI.keyboard_focus is not this) return false
      UI.keyboard_focus = this
      return true

    method capture_pointer_focus->Logical
      if (UI.pointer_focus and UI.pointer_focus is not this) return false
      UI.pointer_focus = this
      return true

    method can_split_x( max_width:Int32 )->Logical
      return false

    method clear_modified
      (forEach in children).clear_modified
      @is_modified = false

    method clip->Box
      return UI.clip.value

    method collect_drawable( list:UIComponent[] )
      if (is_drawable)
        list.add( this )
      else
        (forEach in children).collect_drawable( list )
      endIf

    method contains( e:PointerEvent )->Logical
      return contains( e.position )

    method contains( pos:XY )->Logical
      return display_bounds.contains( pos )

    method contains( component:UIComponent )->Logical
      while (component)
        if (component is this) return true
        component .= parent
      endWhile
      return false

    method content_position->XY
      # Same as display_position except incorporates this component's content content_offset()
      if (parent) return (position + content_offset) + parent.content_position + display_offset
      else        return (position + content_offset) + display_offset

    method description->String
      return _description.to_json

    method dispatch( e:KeyEvent )
      # Send input events to children in reverse order because the top layer comes last
      if (next) next.dispatch( e )
      if (e.is_consumed) return
      handle( e )

    method dispatch( e:PointerEvent )
      # Send input events to children in reverse order because the top layer comes last
      if (next) next.dispatch( e )
      if (e.is_consumed) return
      handle( e )

    method dispatch( e:ScrollEvent )
      # Send input events to children in reverse order because the top layer comes last
      if (next) next.dispatch( e )
      if (e.is_consumed) return
      handle( e )

    method dispatch( e:TextEvent )
      # Send input events to children in reverse order because the top layer comes last
      if (next) next.dispatch( e )
      if (e.is_consumed) return
      handle( e )

    method dispatch_message( message:Value )
      on_message( message )
      (forEach in children).dispatch_message( message )

    method dispatch_on_update_layout
      on_update_layout
      (forEach in children).dispatch_on_update_layout

    method dispatch_after_update_layout
      after_update_layout
      (forEach in children).dispatch_after_update_layout

    method display_bounds->Box
      return Box( display_position, size )

    method display_offset->XY
      return UIAttributes.display_offset( this )

    method display_position->XY
      if (parent) return position + parent.content_position + display_offset
      else        return position + display_offset

    method draw( clip_bounds:Box )
      if (is_hidden) return

      localize display_bounds
      local draw_bounds = clip_bounds & display_bounds
      if (draw_bounds)
        temporarily UI.clip = draw_bounds.value
          on_draw
          local inner_bounds = clip_bounds & to_inner_bounds(display_bounds)
          if (inner_bounds)
              draw_subcomponents( inner_bounds.value )
          endIf
          after_draw
        endTemporarily
      endIf

    method draw_subcomponents( draw_bounds:Box )
      use subcomponents = WorkList<<UIComponent>>
        (forEach in children).collect_drawable( subcomponents )
        forEach (component in subcomponents)
          component.draw( draw_bounds )
        endForEach
      endUse

    method enable_input( setting:Logical )
      if (setting) flags &= !UIComponent.FLAG_DISABLE_INPUT
      else         flags |=  UIComponent.FLAG_DISABLE_INPUT

    method expand_to_fill
      flags &= !(FLAG_WIDTH_MASK|FLAG_HEIGHT_MASK)  # turn off fixed and shrink flags

    method expand_to_fill_height
      flags &= !FLAG_HEIGHT_MASK  # turn off fixed and shrink flags

    method expand_to_fill_width
      flags &= !FLAG_WIDTH_MASK   # turn off fixed and shrink flags

    method find( pos:XY )->UIComponent
      # The algorithm looks a little unusual because we want to find the
      # LAST child that contains 'pos'.

      if (next)
        # Recursively find the last sibling that contains 'pos'
        local result = next.find( pos )
        if (result) return result
      endIf

      if (not is_modifier and not contains(pos)) return null # Don't bother checking children

      if (first_child)
        local result = first_child.find( pos )
        if (result) return result
      endIf

      if (count == 0 and contains(pos)) return this
      return null

    method first_drawable_child->UIComponent
      forEach (child in children)
        if (child.is_drawable) return child
        local result = child.first_drawable_child
        if (result) return result
      endForEach
      return null

    method font->UIFont
      return UIAttributes.font( this )

    method handle( e:KeyEvent )
      if (is_hidden or is_input_disabled) return

      on( e )
      if (e.is_consumed) return

      if (first_child)
        first_child.dispatch( e )
        if (e.is_consumed) return
      endIf

      after( e )

    method handle( e:PointerEvent )
      if (is_hidden or is_input_disabled) return

      on( e )
      if (e.is_consumed) return

      if (first_child)
        first_child.dispatch( e )
        if (e.is_consumed) return
      endIf

      after( e )

    method handle( e:ScrollEvent )
      if (is_hidden or is_input_disabled) return

      on( e )
      if (e.is_consumed) return

      if (first_child)
        first_child.dispatch( e )
        if (e.is_consumed) return
      endIf

      after( e )

    method handle( e:TextEvent )
      if (is_hidden or is_input_disabled) return

      on( e )
      if (e.is_consumed) return

      if (first_child)
        first_child.dispatch( e )
        if (e.is_consumed) return
      endIf

      after( e )

    method handle_resize
      on_resize
      UIAttributes.on_resize( this )
      (forEach in children).handle_resize
      after_resize

    method has_keyboard_focus->Logical
      return (UI.keyboard_focus is this)

    method has_pointer_focus->Logical
      return (UI.pointer_focus is this)

    method height->Real64 [macro]
      return this.size.y

    method inner_display_bounds->Box
      return to_inner_bounds( display_bounds )

    method is_br->Logical
      return false

    method is_drawable->Logical
      return true

    method is_expand_to_fill_height->Logical
      return not (@flags & FLAG_HEIGHT_MASK)

    method is_expand_to_fill_width->Logical
      return not (@flags & FLAG_WIDTH_MASK)

    method is_fixed_height->Logical
      return (flags & FLAG_FIXED_HEIGHT)

    method is_fixed_width->Logical
      return (flags & FLAG_FIXED_WIDTH)

    method is_input_enabled->Logical [macro]
      return not (this.flags & UIComponent.FLAG_DISABLE_INPUT)

    method is_input_disabled->Logical [macro]
      return (this.flags & UIComponent.FLAG_DISABLE_INPUT)

    method is_modifier->Logical
      return true

    method is_shrink_to_fit_height->Logical
      return (@flags & FLAG_SHRINK_TO_FIT_HEIGHT)?

    method is_shrink_to_fit_width->Logical
      return (@flags & FLAG_SHRINK_TO_FIT_WIDTH)?

    method is_hidden->Logical
      return (@flags & FLAG_HIDDEN)?

    method is_visible->Logical
      return not (@flags & FLAG_HIDDEN)?

    method content_offset->XY
      return XY.zero

    method prepare_layout
      local og_size = size

      on_prepare_layout
      (forEach in children).prepare_layout
      after_prepare_layout

      if (size != og_size) is_modified = true

    method measure_content_width( subcomponents:UIComponent[] )->Real64?
      local result : Real64?
      forEach (component in subcomponents)
        local w = component.measure_width( null )
        if (w)
          if (not result or w.value > result.value) result = w
        endIf
      endForEach
      return result

    method measure_content_height( subcomponents:UIComponent[] )->Real64?
      local result : Real64?
      forEach (component in subcomponents)
        local h = component.measure_height( null )
        if (h)
          if (not result or h.value > result.value) result = h
        endIf
      endForEach
      return result

    method on( e:KeyEvent )
      noAction

    method on( e:PointerEvent )
      noAction

    method on( e:ScrollEvent )
      noAction

    method on( e:TextEvent )
      noAction

    method on_message( message:Value )
      noAction

    method on_update
      noAction

    method on_update_layout
      noAction

    method on_draw
      UI.theme._dispatch_on_draw( this )

    method on_draw<<$Theme>>( theme:$Theme )  [propagated]
      # Components can override this method per-theme and draw themselves or
      # they can let the theme draw them.
      theme.on_draw( this )

    method on_prepare_layout
      UI.theme._dispatch_on_prepare_layout( this )

    method on_prepare_layout<<$Theme>>( theme:$Theme )  [propagated]
      theme.on_prepare_layout( this )

    method on_release_keyboard_focus
      noAction

    method on_release_pointer_focus
      noAction

    method on_resize
      noAction

    method on_resize( callback:Function(UIComponent) )
      UIAttributes.set_on_resize( this, callback )

    method operator+( rhs:UIComponent )->UIComponent
      return UIGeneratedHorizontalLayout( this ).[ add(rhs) ]

    method operator/( rhs:UIComponent )->UIComponent
      return UIGeneratedVerticalLayout( this ).[ add(rhs) ]

    method operator|( rhs:UIComponent )->UIComponent
      return UIGeneratedStackLayout( this ).[ add(rhs) ]

    method release_keyboard_focus
      if (UI.keyboard_focus is this)
        UI.keyboard_focus = null
        on_release_keyboard_focus
      endIf

    method release_pointer_focus
      if (UI.pointer_focus is this)
        UI.pointer_focus = null
        on_release_pointer_focus
      endIf

    method request_redraw
      # Marks this component and its screen area as needing to be redrawn
      request_redraw( display_bounds )

    method request_redraw( redraw_bounds:Box )
      if (redraw_bounds.size.is_zero) return

      if (UI.dirty_bounds)
        UI.dirty_bounds = UI.dirty_bounds.value | redraw_bounds
      else
        UI.dirty_bounds = redraw_bounds
      endIf

    method request_layout
      is_modified = true  # class Node setter auto-propagates this up the hierarchy

    method set_alignment( value:Anchor )
      UIAttributes.set_alignment( this, value )

    method set_anchor( value:Anchor )
      UIAttributes.set_anchor( this, value )

    method set_default_height( h:Int32 )
      if (not is_fixed_height) height = h

    method set_default_size( new_default_size:XY )
      default_width  = new_default_size.x
      default_height = new_default_size.y

    method set_default_width( w:Int32 )
      if (not is_fixed_width) width = w

    method set_display_offset( value:XY )
      UIAttributes.set_display_offset( this, value )

    method set_fixed_height( h:Int32 )
      flags = (flags & !FLAG_HEIGHT_MASK) | FLAG_FIXED_HEIGHT
      size = XY( size.x, h )

    method set_fixed_size( new_fixed_size:XY )
      flags = (flags & !FLAG_SIZE_MASK) | FLAG_FIXED_WIDTH | FLAG_FIXED_HEIGHT
      size = new_fixed_size

    method set_fixed_width( w:Int32 )
      flags = (flags & !FLAG_WIDTH_MASK) | FLAG_FIXED_WIDTH
      size = XY( w, size.y )

    method set_font( font:UIFont )
      UIAttributes.set_font( this, font )

    method set_height( h:Real64 )
      if (h == size.y) return
      request_redraw  # redraw old area
      size = XY( size.x, h )
      request_layout  # includes redraw of new area

    method set_is_modified( setting:Logical )
      if (setting) request_redraw
      if (@is_modified == setting) return
      @is_modified = setting
      if (setting)
        local cur = parent
        while (cur)
          cur.@is_modified = true
          cur .= parent
        endWhile
      endIf

    method set_content_offset( content_offset:XY )
      throw UnsupportedOperationError()

    method set_weight( w:Real64 )
      UIAttributes.set_weight( this, XY(w) )

    method set_weight( w:XY )
      UIAttributes.set_weight( this, w )

    method set_width( w:Real64 )
      if (w == size.x) return
      request_redraw  # redraw old area
      size = XY( w, size.y )
      request_layout  # includes redraw of new area

    method set_is_visible( setting:Logical )
      if (setting) flags = (flags & !FLAG_HIDDEN)
      else         flags = (flags |  FLAG_HIDDEN)

    method shrink_to_fit
      shrink_to_fit_width
      shrink_to_fit_height

    method shrink_to_fit_height
      flags = (flags & !FLAG_HEIGHT_MASK) | FLAG_SHRINK_TO_FIT_HEIGHT

    method shrink_to_fit_width
      flags = (flags & !FLAG_WIDTH_MASK) | FLAG_SHRINK_TO_FIT_WIDTH

    method split_after( i:Int32 )->UIComponent
      return null

    method split_x( max_width=null:Int32? )->UIComponent
      return null

    method text_content->String
      return null

    method to_inner_bounds( bounds:Box )->Box
      # Transforms the given bounds (which may be local bounds or display bounds)
      # into inner bounds. Usually there is no change but borders and frames usually
      # crop the box.
      return bounds

    method to_outer_bounds( bounds:Box )->Box
      # Transforms inner bounds into outer bounds. Default approach uses to_inner_bounds
      # and calculates the inverse, so in most cases only to_inner_bounds() needs
      # to be overridden.
      local shrunk = to_inner_bounds(Box(10000,10000))
      return Box( bounds.position-shrunk.position, bounds.size+(XY(10000,10000)-shrunk.size) )

    method update
      on_update
      if (actions) actions .= update
      update_subcomponents
      after_update

    method update_layout( new_bounds:Box )
      # Only called on a top-level UIComponent
      prepare_layout
      dispatch_on_update_layout
      update_layout_width( new_bounds.size.x )
      update_layout_height( new_bounds.size.y )
      update_layout_placement( new_bounds )
      dispatch_after_update_layout
      clear_modified

    method update_layout_placement( container:Box )
      local anchor = this.anchor
      position = Box(size).positioned_within( container, anchor ).position.floor
      update_subcomponent_placement( to_inner_bounds(Box(size)) )

    method update_layout_width( container_width:Real64 )
      width = which{ measure_width(container_width) || container_width }

      use subcomponents = WorkList<<UIComponent>>
        (forEach in children).collect_drawable( subcomponents )
        update_subcomponent_widths( subcomponents, to_inner_bounds(Box(size)).size.x )
      endUse

    method measure_width( container_width:Real64? )->Real64?
      if (is_fixed_width) return size.x
      if (is_expand_to_fill_width) return container_width

      # Shrink to fit content width
      local result : Real64?
      use subcomponents = WorkList<<UIComponent>>
        (forEach in children).collect_drawable( subcomponents )
        result = measure_content_width( subcomponents )
      endUse

      if (result)
        return to_outer_bounds( Box(0,0,result.value,0) ).size.x
      endIf
      return container_width

    method update_subcomponent_widths( subcomponents:UIComponent[], container_width:Real64 )
      (forEach in subcomponents).update_layout_width( container_width )

    method update_layout_height( container_height:Real64 )
      height = which{ measure_height(container_height) || container_height }

      use subcomponents = WorkList<<UIComponent>>
        (forEach in children).collect_drawable( subcomponents )
        update_subcomponent_heights( subcomponents, to_inner_bounds(Box(size)).size.y )
      endUse

    method measure_height( container_height:Real64? )->Real64?
      if (is_fixed_height) return size.y
      if (is_expand_to_fill_height) return container_height

      # Shrink to fit content height
      local result : Real64?
      use subcomponents = WorkList<<UIComponent>>
        (forEach in children).collect_drawable( subcomponents )
        result = measure_content_height( subcomponents )
      endUse

      if (result)
        return to_outer_bounds( Box(0,0,0,result.value) ).size.y
      endIf
      return container_height

    method update_subcomponent_heights( subcomponents:UIComponent[], container_height:Real64 )
      (forEach in subcomponents).update_layout_height( container_height )

    method update_subcomponent_placement( container:Box )
      use list = WorkList<<UIComponent>>
        (forEach in children).collect_drawable( list )
        update_subcomponent_placement( list, container )
      endUse

    method update_subcomponent_placement( subcomponents:UIComponent[], container:Box )
      forEach (component in subcomponents)
        component.update_layout_placement( container )
      endForEach

    method update_subcomponents
      (forEach in children).update

    method weight->XY
      return UIAttributes.weight( this )

    method width->Real64 [macro]
      return this.size.x

    method _description->Value
      local result = @{ name:type_name.after_any(':') }
      _extended_description( result )
      if (first_child)
        local subcomponents = result.ensure_list( "children" )
        forEach (child in children) subcomponents.add( child._description )
      endIf
      return result

    method _extended_description( table:Value )
      local bounds = display_bounds
      table//bounds = @[ bounds.x, bounds.y, bounds.width, bounds.height ]

endClass

