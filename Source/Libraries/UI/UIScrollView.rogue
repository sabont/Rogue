module UI

class UIScrollView : UILayout
  PROPERTIES
    content_offset : XY
    controller     : UIScrollViewController

  METHODS
    method init
      controller = create_controller
      prior.init

    method init( content:UIComponent )
      controller = create_controller
      prior.init( content )

    method after_prepare_layout
      if (controller) controller.after_prepare_layout

    method after_update
      if (controller) controller.after_update

    method create_controller->UIScrollViewController
      return StandardUIScrollViewController( this )

    method bottom_offset->Real64
      # Result will be positive or zero.
      return (content_height - size.y).clamped_low(0)

    method content_height->Real64
      local first = first_drawable_child
      if (not first) return 0
      return first.size.y

    method on_prepare_layout
      if (controller) controller.on_prepare_layout

    method handle( e:PointerEvent )
      if (controller) controller.on( e )

    method content_offset->XY [override]
      return @content_offset

    method on( e:ScrollEvent )
      if (controller) controller.on( e )

    method on_select( e_press:PointerEvent, e_release:PointerEvent )
      # UIScrollView consumes any original press event in preparation for dragging.
      # If a release comes without turning into a drag, this pair of press/release events
      # should be dispatched to the appropriate subcomponent.
      local subcomponent = find( e_press.position )
      if (subcomponent)
        subcomponent.handle( e_press )
        subcomponent.handle( e_release )
        return
      else
        on_select_background( e_press.position )
      endIf

    method on_select_background( position:XY )
      noAction

    method on_update
      if (controller) controller.on_update

    method on_update_layout
      if (controller) controller.on_update_layout

    method scroll_to( vertical_offset:Real64 )
      scroll_to( XY(0,vertical_offset) )

    method scroll_to( content_offset:XY )
      if (controller) controller.scroll_to( content_offset )

    method scroll_to_bottom
      if (controller) controller.scroll_to_bottom
      else            content_offset = bottom_offset

    method scroll_to_top
      if (controller) controller.scroll_to_top
      else            content_offset = top_offset

    method set_content_offset( @content_offset )

    method top_offset->Real64
      return 0

endClass

